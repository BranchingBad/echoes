# generate_braille_sign.py

import math

def generate_braille_scad(text_to_braille):
    """
    Generates OpenSCAD code for a 3D-printable braille sign.
    """
    
    # Unified English Braille (UEB) dot mapping
    braille_dots = {
        '⠠': [6],  # Capital sign
        '⠏': [1, 2, 3, 4],  # p
        '⠁': [1],  # a
        '⠞': [2, 3, 4, 5],  # t
        '⠊': [2, 4],  # i
        '⠫': [2, 6],  # en
        '⠐': [5],  # Grade 2 initial letter sign
        '⠝': [1, 3, 4, 5],  # n
        ' ': [] # space
    }
    
    # Dimensions in mm, optimized for 3D printing
    dot_diameter = 2.0
    dot_height = 0.8
    dot_spacing_x = 3.0
    dot_spacing_y = 3.0
    cell_spacing_x = 7.0
    cell_spacing_y = 11.0
    
    # Base plate dimensions
    base_height = 2.0
    padding = 10.0
    
    total_width = 0
    total_length = dot_spacing_y * 2 + padding * 2
    
    braille_string = '⠠⠏⠁⠞⠊⠫⠞ ⠠⠐⠝'
    
    # Calculate the total width of the sign based on the braille string
    word_start_x = padding
    
    current_x = word_start_x
    for i, char in enumerate(braille_string):
        if char == ' ':
            current_x += cell_spacing_x
        else:
            current_x += cell_spacing_x
    
    total_width = current_x
    
    scad_code = f"""
// 3D printable braille sign generated by Python script

// Braille dot and cell dimensions (in mm)
dot_d = {dot_diameter};
dot_h = {dot_height};
dot_space_x = {dot_spacing_x};
dot_space_y = {dot_spacing_y};
cell_space_x = {cell_spacing_x};
cell_space_y = {cell_spacing_y};
base_h = {base_height};
padding = {padding};

// Function to create a braille cell
module braille_cell(dots) {{
    for (i = 0; i < len(dots); i++) {{
        dot_number = dots[i];
        
        // Calculate x and y position for each dot
        dot_x = 0;
        dot_y = 0;
        if (dot_number == 1 || dot_number == 4) {{
            dot_x = -dot_space_x/2;
        }} else if (dot_number == 2 || dot_number == 5) {{
            dot_x = dot_space_x/2;
        }}
        
        if (dot_number == 1 || dot_number == 2) {{
            dot_y = dot_space_y;
        }} else if (dot_number == 3 || dot_number == 6) {{
            dot_y = -dot_space_y;
        }}
        
        translate([dot_x, dot_y, base_h]) {{
            cylinder(h = dot_h, d = dot_d, $fn = 20);
        }}
    }}
}}

// Main sign module
module braille_sign() {{
    // Base plate
    cube([total_width + padding * 2, total_length, base_h]);
    
    // Braille characters
"""
    
    current_x = padding
    for char in text_to_braille:
        if char == ' ':
            current_x += cell_spacing_x
        else:
            dots = braille_dots[char]
            scad_code += f"""
    translate([{current_x}, {padding}, 0]) {{
        braille_cell([{', '.join(map(str, dots))}]);
    }}
"""
            current_x += cell_spacing_x

    scad_code += """
}

braille_sign();
"""
    return scad_code

if __name__ == "__main__":
    braille_text = '⠠⠏⠁⠞⠊⠫⠞ ⠠⠐⠝'
    print(generate_braille_scad(braille_text))
